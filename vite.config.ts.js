// vite.config.ts
import { defineConfig, loadEnv } from "vite";
import vue from "@vitejs/plugin-vue";
import * as path from "path";
var vite_config_default = defineConfig(({ command, mode, ssrBuild }) => {
  if (command == "serve") {
    console.log(loadEnv(mode, process.cwd()));
  } else {
  }
  const env = loadEnv(mode, process.cwd());
  const { VITE_DROP_CONSOLE, VITE_APP_BASE_URL } = env;
  return {
    base: `${VITE_APP_BASE_URL}/`,
    publicDir: "src/assets",
    resolve: {
      alias: {
        "@": path.resolve("/Users/iot/Desktop/project/sportClimbingAdmin", "src")
      }
    },
    plugins: [vue()],
    server: {
      port: 8080,
      hmr: true,
      proxy: {
        "^/sportClimbingAdmin/api": {
          target: "http://1.14.96.156:8082",
          changeOrigin: true
        }
      }
    },
    build: {
      outDir: "sportClimbingAdmin",
      assetsDir: "assets",
      sourcemap: false,
      brotliSize: false,
      minify: "esbuild",
      chunkSizeWarningLimit: 1e3,
      cssTarget: "chrome61",
      rollupOptions: {
        input: {
          main: path.resolve("/Users/iot/Desktop/project/sportClimbingAdmin", "index.html")
        },
        output: {
          chunkFileNames: "js/[name]-[hash].js",
          entryFileNames: "js/[name]-[hash].js",
          assetFileNames: "[ext]/[name]-[hash].[ext]"
        }
      }
    },
    esbuild: {
      pure: VITE_DROP_CONSOLE ? ["console.log", "debugger"] : []
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGRlZmluZUNvbmZpZywgbG9hZEVudiB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgdnVlIGZyb20gXCJAdml0ZWpzL3BsdWdpbi12dWVcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IENvbnNvbGUgfSBmcm9tIFwiY29uc29sZVwiO1xuXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgY29tbWFuZCwgbW9kZSwgc3NyQnVpbGQgfSkgPT4ge1xuICBpZiAoY29tbWFuZCA9PSBcInNlcnZlXCIpIHtcbiAgICBjb25zb2xlLmxvZyhsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCkpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21tYW5kID09PSAnYnVpbGQnXG4gIH1cbiAgY29uc3QgZW52ID0gbG9hZEVudihtb2RlLCBwcm9jZXNzLmN3ZCgpKTsgLy8gXHU3M0FGXHU1ODgzXHU1M0Q4XHU5MUNGXHU1QkY5XHU4QzYxXG4gIGNvbnN0IHsgVklURV9EUk9QX0NPTlNPTEUsIFZJVEVfQVBQX0JBU0VfVVJMIH0gPSBlbnY7XG5cbiAgcmV0dXJuIHtcbiAgICBiYXNlOiBgJHtWSVRFX0FQUF9CQVNFX1VSTH0vYCxcbiAgICBwdWJsaWNEaXI6IFwic3JjL2Fzc2V0c1wiLCAvLyBcdTg5ODFcdTYyNTNcdTUzMDVcdTc2ODRcdTk3NTlcdTYwMDFcdThENDRcdTZFOTBcdUZGMENcdTYyMTFcdTc2ODRcdTU2RkVcdTcyNDdcdThENDRcdTZFOTBcdTU3MjhcdThGRDlcdTRFMkFcdTY1ODdcdTRFRjZcdTU5MzlcdTkxQ0NcdUZGMENcdTRFMERcdTkxNERcdTdGNkVcdTc2ODRcdThCRERcdUZGMENvdXRwdXRcdTYyNTNcdTUzMDVcdTUxRkFcdTY3NjVcdTc2ODRcdTY1ODdcdTRFRjZcdTRGMUFcdTZDQTFcdTY3MDlcdTU2RkVcdTcyNDdcbiAgICByZXNvbHZlOiB7XG4gICAgICAvLyBcdThCQkVcdTdGNkVcdTUyMkJcdTU0MERcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgIFwiQFwiOiBwYXRoLnJlc29sdmUoXCIvVXNlcnMvaW90L0Rlc2t0b3AvcHJvamVjdC9zcG9ydENsaW1iaW5nQWRtaW5cIiwgXCJzcmNcIiksXG4gICAgICB9LFxuICAgIH0sXG4gICAgcGx1Z2luczogW3Z1ZSgpXSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IDgwODAsIC8vIFx1NTQyRlx1NTJBOFx1N0FFRlx1NTNFM1xuICAgICAgaG1yOiB0cnVlLFxuICAgICAgLy8gXHU4QkJFXHU3RjZFIGh0dHBzIFx1NEVFM1x1NzQwNlxuICAgICAgcHJveHk6IHtcbiAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU0RUUzXHU3NDA2XG4gICAgICAgIFwiXi9zcG9ydENsaW1iaW5nQWRtaW4vYXBpXCI6IHtcbiAgICAgICAgICB0YXJnZXQ6IFwiaHR0cDovLzEuMTQuOTYuMTU2OjgwODJcIixcbiAgICAgICAgICBjaGFuZ2VPcmlnaW46IHRydWUsIC8vIFx1NjYyRlx1NTQyNlx1OERFOFx1NTdERlxuICAgICAgICAgIC8vIHBhdGhSZXdyaXRlOiB7XG4gICAgICAgICAgLy8gICAnXi4qL21hbGxvcy9hcGknOiAnJyAvL1x1OTcwMFx1ODk4MXJld3JpdGVcdTkxQ0RcdTUxOTlcdTc2ODQsXG4gICAgICAgICAgLy8gfVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJ1aWxkOiB7XG4gICAgICBvdXREaXI6IFwic3BvcnRDbGltYmluZ0FkbWluXCIsXG4gICAgICBhc3NldHNEaXI6IFwiYXNzZXRzXCIsXG4gICAgICBzb3VyY2VtYXA6IGZhbHNlLCAvLyBcdTY3ODRcdTVFRkFcdTU0MEVcdTY2MkZcdTU0MjZcdTc1MUZcdTYyMTAgc291cmNlIG1hcCBcdTY1ODdcdTRFRjZcbiAgICAgIGJyb3RsaVNpemU6IGZhbHNlLCAvLyBcdTU0MkZcdTc1MjgvXHU3OTgxXHU3NTI4IGJyb3RsaSBcdTUzOEJcdTdGMjlcdTU5MjdcdTVDMEZcdTYyQTVcdTU0NEFcdTMwMDIgXHU3OTgxXHU3NTI4XHU4QkU1XHU1MjlGXHU4MEZEXHU1M0VGXHU4MEZEXHU0RjFBXHU2M0QwXHU5QUQ4XHU1OTI3XHU1NzhCXHU5ODc5XHU3NkVFXHU3Njg0XHU2Nzg0XHU1RUZBXHU2MDI3XHU4MEZEXG4gICAgICBtaW5pZnk6IFwiZXNidWlsZFwiLCAvLyBcdTk4NzlcdTc2RUVcdTUzOEJcdTdGMjkgOmJvb2xlYW4gfCAndGVyc2VyJyB8ICdlc2J1aWxkJ1xuICAgICAgY2h1bmtTaXplV2FybmluZ0xpbWl0OiAxMDAwLCAvLyBjaHVuayBcdTU5MjdcdTVDMEZcdThCNjZcdTU0NEFcdTc2ODRcdTk2NTBcdTUyMzZcdUZGMDhcdTRFRTUga2JzIFx1NEUzQVx1NTM1NVx1NEY0RFx1RkYwOVx1OUVEOFx1OEJBNFx1RkYxQTUwMFxuICAgICAgY3NzVGFyZ2V0OiBcImNocm9tZTYxXCIsIC8vIFx1OTYzMlx1NkI2MiB2aXRlIFx1NUMwNiByZ2JhKCkgXHU5ODlDXHU4MjcyXHU4RjZDXHU1MzE2XHU0RTNBICNSR0JBIFx1NTM0MVx1NTE2RFx1OEZEQlx1NTIzNlx1N0IyNlx1NTNGN1x1NzY4NFx1NUY2Mlx1NUYwRiAgKFx1ODk4MVx1NTE3Q1x1NUJCOVx1NzY4NFx1NTczQVx1NjY2Rlx1NjYyRlx1NUI4OVx1NTM1M1x1NUZBRVx1NEZFMVx1NEUyRFx1NzY4NCB3ZWJ2aWV3IFx1NjVGNixcdTVCODNcdTRFMERcdTY1MkZcdTYzMDEgQ1NTIFx1NEUyRFx1NzY4NCAjUkdCQSBcdTUzNDFcdTUxNkRcdThGREJcdTUyMzZcdTk4OUNcdTgyNzJcdTdCMjZcdTUzRjcpXG4gICAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgLy8gXHU2NUI5XHU0RkJGXHU4RkQwXHU3RUY0XHU5MTREXHU3RjZFXHVGRjBDXHU2MjExXHU2MjhBaW5kZXguaHRtbFx1NTE2NVx1NTNFM1x1NjU4N1x1NEVGNlx1NTQwRFx1NTQ4Q1x1NjMwN1x1NUI5QVx1OEY5M1x1NTFGQVx1OERFRlx1NUY4NFx1NjU4N1x1NEVGNlx1NjUzOVx1NEUzQVx1NTQwQ1x1NTQwRFx1NEU4Nlx1RkYwQ1x1NEY0Nlx1NjYyRlx1NUYwMFx1NTNEMVx1NzNBRlx1NTg4M1x1NkNBMVx1NjcwOWluZGV4Lmh0bWxcdTRGMUFcdTVCRkNcdTgxRjRcdTk4NzVcdTk3NjJcdTdBN0FcdTc2N0RcdUZGMENcdTYyNDBcdTRFRTVcdTYyMTFcdTY2MkZcdTUxOERcdTU5MERcdTUyMzZcdTRFMDBcdTRFRkRcdTUxRkFcdTY3NjVcdTU0N0RcdTU0MERcdTRFM0FpbmRleC5odG1sXG4gICAgICAgICAgbWFpbjogcGF0aC5yZXNvbHZlKFwiL1VzZXJzL2lvdC9EZXNrdG9wL3Byb2plY3Qvc3BvcnRDbGltYmluZ0FkbWluXCIsIFwiaW5kZXguaHRtbFwiKSxcbiAgICAgICAgICAvLyBuZXN0ZWQ6IHJlc29sdmUoXCIvVXNlcnMvaW90L0Rlc2t0b3AvcHJvamVjdC9zcG9ydENsaW1iaW5nQWRtaW5cIiwgJ25lc3RlZC9pbmRleC5odG1sJylcbiAgICAgICAgfSxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgLy8gXHU5MTREXHU3RjZFXHU4RkQ5XHU0RTJBXHU2NjJGXHU4QkE5XHU0RTBEXHU1NDBDXHU3QzdCXHU1NzhCXHU2NTg3XHU0RUY2XHU2NTNFXHU1NzI4XHU0RTBEXHU1NDBDXHU2NTg3XHU0RUY2XHU1OTM5XHVGRjBDXHU0RTBEXHU0RjFBXHU2NjNFXHU1Rjk3XHU1OTJBXHU0RTcxXG4gICAgICAgICAgY2h1bmtGaWxlTmFtZXM6IFwianMvW25hbWVdLVtoYXNoXS5qc1wiLFxuICAgICAgICAgIGVudHJ5RmlsZU5hbWVzOiBcImpzL1tuYW1lXS1baGFzaF0uanNcIixcbiAgICAgICAgICBhc3NldEZpbGVOYW1lczogXCJbZXh0XS9bbmFtZV0tW2hhc2hdLltleHRdXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgZXNidWlsZDoge1xuICAgICAgcHVyZTogVklURV9EUk9QX0NPTlNPTEUgPyBbXCJjb25zb2xlLmxvZ1wiLCBcImRlYnVnZ2VyXCJdIDogW10sXG4gICAgfSxcbiAgfTtcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBO0FBQ0E7QUFDQTtBQUtBLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsU0FBUyxNQUFNLGVBQWU7QUFDM0QsTUFBSSxXQUFXLFNBQVM7QUFDdEIsWUFBUSxJQUFJLFFBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxDQUFDO0FBQUEsRUFDMUMsT0FBTztBQUFBLEVBRVA7QUFDQSxRQUFNLE1BQU0sUUFBUSxNQUFNLFFBQVEsSUFBSSxDQUFDO0FBQ3ZDLFFBQU0sRUFBRSxtQkFBbUIsc0JBQXNCO0FBRWpELFNBQU87QUFBQSxJQUNMLE1BQU0sR0FBRztBQUFBLElBQ1QsV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLE1BRVAsT0FBTztBQUFBLFFBQ0wsS0FBSyxBQUFLLGFBQVEsaURBQWlELEtBQUs7QUFBQSxNQUMxRTtBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFBQSxJQUNmLFFBQVE7QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLEtBQUs7QUFBQSxNQUVMLE9BQU87QUFBQSxRQUVMLDRCQUE0QjtBQUFBLFVBQzFCLFFBQVE7QUFBQSxVQUNSLGNBQWM7QUFBQSxRQUloQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxPQUFPO0FBQUEsTUFDTCxRQUFRO0FBQUEsTUFDUixXQUFXO0FBQUEsTUFDWCxXQUFXO0FBQUEsTUFDWCxZQUFZO0FBQUEsTUFDWixRQUFRO0FBQUEsTUFDUix1QkFBdUI7QUFBQSxNQUN2QixXQUFXO0FBQUEsTUFDWCxlQUFlO0FBQUEsUUFDYixPQUFPO0FBQUEsVUFFTCxNQUFNLEFBQUssYUFBUSxpREFBaUQsWUFBWTtBQUFBLFFBRWxGO0FBQUEsUUFDQSxRQUFRO0FBQUEsVUFFTixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxVQUNoQixnQkFBZ0I7QUFBQSxRQUNsQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDUCxNQUFNLG9CQUFvQixDQUFDLGVBQWUsVUFBVSxJQUFJLENBQUM7QUFBQSxJQUMzRDtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
